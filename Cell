public class Cell {
    private String color;              // Color de la celda
    private boolean hasRobot;          // Indica si la celda tiene un robot
    private boolean hasStore;          // Indica si la celda tiene una tienda

    private int positionX;     
    private int positionY;     

    private Rectangle background; 
    private Rectangle cell;       

    /**
     * Construye una celda en el tablero.
     *
     * @param color color de la celda.
     */
    public Cell() {
        this.color = color;
        this.hasRobot = false;
        this.hasStore = false;

        this.positionX = 0; 
        this.positionY = 0;

        background = new Rectangle();
        background.changeColor("black");
        background.changeSize(50, 50);
        background.setPosition(positionX, positionY);
        background.makeVisible();
    
        cell = new Rectangle();
        cell.changeColor("desertsand");
        cell.changeSize(40, 40);
        cell.setPosition(5, 5);
        cell.makeVisible();
    }

    /**
     * Coloca un robot en la celda.
     */
    public void placeRobot() {
        this.hasRobot = true;
    }

    /**
     * Elimina el robot de la celda.
     */
    public void removeRobot() {
        this.hasRobot = false;
    }

    /**
     * Coloca una tienda en la celda.
     */
    public void placeStore() {
        this.hasStore = true;
    }

    /**
     * Elimina la tienda de la celda.
     */
    public void removeStore() {
        this.hasStore = false;
    }

    /**
     * Verifica si la celda contiene un robot.
     *
     * @return {@code true} si hay un robot, {@code false} en caso contrario.
     */
    public boolean hasRobot() {
        return hasRobot;
    }

    /**
     * Verifica si la celda contiene una tienda.
     *
     * @return {@code true} si hay una tienda, {@code false} en caso contrario.
     */
    public boolean hasStore() {
        return hasStore;
    }

    /**
     * Mueve la celda (y todos sus elementos gráficos) en una dirección dada.
     *
     * @param direction dirección a mover: "up", "down", "left" o "right".
     */
    public void moveTo(String direction) {
        int step = 45; // tamaño de la casilla en píxeles
        int dx = 0;
        int dy = 0;
    
        switch (direction.toLowerCase()) {
            case "up":    dy = -step; break;
            case "down":  dy = step;  break;
            case "left":  dx = -step; break;
            case "right": dx = step;  break;
            default:
                System.out.println("Dirección no válida. Usa: up, down, left, right");
                return;
        }
    
        // 🔹 Actualizar posiciones lógicas
        positionX += dx;
        positionY += dy;
    
        // 🔹 Mover representaciones gráficas
        background.moveHorizontal(dx);
        background.moveVertical(dy);
    
        cell.moveHorizontal(dx);
        cell.moveVertical(dy);
    }
    
    /**
     * Hace visible gráficamente la celda (fondo, celda, y cualquier objeto si existe).
     */
    public void makeVisible() {
        background.makeVisible();
        cell.makeVisible();
    }

    /**
     * Hace invisible gráficamente la celda (fondo, celda, y cualquier objeto si existe).
     */
    public void makeInvisible() {
        background.makeInvisible();
        cell.makeInvisible();
    }
    
    /**
     * Devuelve la posición X de la celda.
     *
     * @return posición X en el tablero.
     */
    public int getPositionX() {
        return positionX;
    }
    
    /**
     * Devuelve la posición Y de la celda.
     *
     * @return posición Y en el tablero.
     */
    public int getPositionY() {
        return positionY;
    }
    
    /**
     * Devuelve el color de la celda.
     *
     * @return color asociado a la celda.
     */
    public String getColor() {
        return color;
    }

    /**
     * Reubica la celda en coordenadas absolutas nuevas.
     * Esto mueve todos los elementos gráficos asociados.
     *
     * @param x nueva coordenada X.
     * @param y nueva coordenada Y.
     */
    public void setPosition(int x, int y) {
        int dx = x - this.positionX;
        int dy = y - this.positionY;

        this.positionX = x;
        this.positionY = y;

        background.moveHorizontal(dx);
        background.moveVertical(dy);

        cell.moveHorizontal(dx);
        cell.moveVertical(dy);
    }
}
