public class Road {
    private Cell[] roadCells;
    private Store[] stores;
    private Robot[] robots;
    private int[] robotsInitLocation;
    private int[] storesInitTenges;
    private int length;
    private int cellSize = 50; // Tamaño fijo de la celda

    public Road(int length) {
        this.length = length;
        roadCells = new Cell[length];
        stores = new Store[length];
        robots = new Robot[length];
        robotsInitLocation = new int[length];
        storesInitTenges = new int[length];
        crearCeldasFila();
    }

    // Dibuja todas las celdas en una sola fila, empezando en la esquina superior izquierda
    private void crearCeldasFila() {
        int startX = 0; // esquina izquierda
        int startY = 0; // esquina arriba
        for (int i = 0; i < length; i++) {
            int x = startX + i * cellSize;
            int y = startY;
            roadCells[i] = new Cell();
            roadCells[i].setPosition(x, y);
            roadCells[i].makeVisible();
            stores[i] = null;
            robots[i] = null;
            robotsInitLocation[i] = -1;
            storesInitTenges[i] = 0;
        }
    }

    public boolean placeStore(int location, int tenges) {
        if (location < 0 || location >= length || stores[location] != null) return false;
        Store store = new Store();
        int cellX = roadCells[location].getPositionX();
        int cellY = roadCells[location].getPositionY();
        store.moveTo(cellX + 28, cellY + 2); // esquina superior derecha de la celda
        store.makeVisible();
        stores[location] = store;
        storesInitTenges[location] = tenges;
        roadCells[location].placeStore();
        return true;
    }

    public boolean removeStore(int location) {
        if (location < 0 || location >= length || stores[location] == null) return false;
        stores[location].makeInvisible();
        stores[location] = null;
        storesInitTenges[location] = 0;
        roadCells[location].removeStore();
        return true;
    }

    public boolean placeRobot(int location) {
        if (location < 0 || location >= length || robots[location] != null) return false;
        Robot robot = new Robot();
        int cellX = roadCells[location].getPositionX();
        int cellY = roadCells[location].getPositionY();
        robot.move(cellX + 2 - robot.getX(), cellY + 33 - robot.getY()); // esquina inferior izquierda
        robot.makeVisible();
        robots[location] = robot;
        robotsInitLocation[location] = location;
        roadCells[location].placeRobot();
        return true;
    }

    public boolean removeRobot(int location) {
        if (location < 0 || location >= length || robots[location] == null) return false;
        robots[location].makeInvisible();
        robots[location] = null;
        robotsInitLocation[location] = -1;
        roadCells[location].removeRobot();
        return true;
    }

    public boolean moveRobot(int location, int meters) {
        if (location < 0 || location >= length || robots[location] == null) return false;
        int target = location + meters;
        if (target < 0 || target >= length || robots[target] != null) return false;
        Robot robot = robots[location];
        int cellX = roadCells[target].getPositionX();
        int cellY = roadCells[target].getPositionY();
        robot.move(cellX + 2 - robot.getX(), cellY + 33 - robot.getY());
        robots[target] = robot;
        robots[location] = null;
        robotsInitLocation[target] = robotsInitLocation[location];
        robotsInitLocation[location] = -1;
        roadCells[target].placeRobot();
        roadCells[location].removeRobot();
        return true;
    }

    public boolean resupplyStores() {
        return true;
    }

    public boolean returnRobots() {
        for (int i = 0; i < length; i++) {
            if (robots[i] != null && robotsInitLocation[i] != -1 && robotsInitLocation[i] != i) {
                int initLoc = robotsInitLocation[i];
                if (robots[initLoc] == null) {
                    Robot robot = robots[i];
                    int cellX = roadCells[initLoc].getPositionX();
                    int cellY = roadCells[initLoc].getPositionY();
                    robot.move(cellX + 2 - robot.getX(), cellY + 33 - robot.getY());
                    robots[initLoc] = robot;
                    robots[i] = null;
                    robotsInitLocation[initLoc] = initLoc;
                    robotsInitLocation[i] = -1;
                    roadCells[initLoc].placeRobot();
                    roadCells[i].removeRobot();
                }
            }
        }
        return true;
    }

    public boolean reboot() {
        for (int i = 0; i < length; i++) {
            if (stores[i] != null) {
                stores[i].makeInvisible();
                stores[i] = null;
                storesInitTenges[i] = 0;
                roadCells[i].removeStore();
            }
            if (robots[i] != null) {
                robots[i].makeInvisible();
                robots[i] = null;
                robotsInitLocation[i] = -1;
                roadCells[i].removeRobot();
            }
        }
        return true;
    }

    public int[][] stores() {
        int count = 0;
        for (int i = 0; i < length; i++) if (stores[i] != null) count++;
        int[][] result = new int[count][2];
        int idx = 0;
        for (int i = 0; i < length; i++) {
            if (stores[i] != null) {
                result[idx][0] = i;
                result[idx][1] = storesInitTenges[i];
                idx++;
            }
        }
        return result;
    }

    public int[][] robots() {
        int count = 0;
        for (int i = 0; i < length; i++) if (robots[i] != null) count++;
        int[][] result = new int[count][1];
        int idx = 0;
        for (int i = 0; i < length; i++) {
            if (robots[i] != null) {
                result[idx][0] = i;
                idx++;
            }
        }
        return result;
    }

    public void makeVisible() {
        for (int i = 0; i < length; i++) roadCells[i].makeVisible();
        for (int i = 0; i < length; i++) {
            if (stores[i] != null) stores[i].makeVisible();
            if (robots[i] != null) robots[i].makeVisible();
        }
    }

    public void makeInvisible() {
        for (int i = 0; i < length; i++) roadCells[i].makeInvisible();
        for (int i = 0; i < length; i++) {
            if (stores[i] != null) stores[i].makeInvisible();
            if (robots[i] != null) robots[i].makeInvisible();
        }
    }

    public void finish() {
        // Si necesitas lógica de cierre, ponla aquí
    }
}
