import java.util.Random;  // Para generar colores aleatorios

public class Store {
    private int positionX;        // Posición X de la tienda
    private int positionY;        // Posición Y de la tienda
    private int sizeRectangle;    // Tamaño de la tienda (ancho)
    private int sizeTriangle;     // Tamaño del techo de la tienda (alto)
    private String color;         // Color aleatorio de la tienda

    private Rectangle base;       // Base de la tienda (rectángulo)
    private Triangle roof;        // Techo de la tienda (triángulo)
    
    private boolean isVisible;

    /**
     * Constructor para crear la tienda con la posición y tamaño dados.
     * @param positionX posición X en el lienzo
     * @param positionY posición Y en el lienzo
     * @param size tamaño de la tienda
     */
    public Store(boolean visible) {
        this.positionX = 54;
        this.positionY = 45;
        this.sizeRectangle = 20;
        this.sizeTriangle = 20;
        this.color = getRandomColor();  // Asignamos un color aleatorio

        // Crear la base de la tienda (rectángulo)
        base = new Rectangle();
        base.changeColor(color); // Usar el color aleatorio
        base.changeSize(sizeRectangle / 2, sizeRectangle);  // La base será el doble de ancha que alta
        base.setPosition(positionX, positionY);
        

        // Crear el techo de la tienda (triángulo)
        roof = new Triangle();
        roof.changeColor("brown");  // El color del techo será siempre café
        roof.changeSize(sizeTriangle / 2, sizeTriangle);  // El techo será un triángulo equilátero
        roof.setPosition(positionX + 10, positionY - sizeTriangle / 2);  // Colocarlo sobre la base
        this.isVisible = visible;
        if (visible) {
            makeVisible();
        }
    }

    /**
     * Método para generar un color aleatorio para la tienda.
     * @return Color aleatorio en formato String.
     */
    private String getRandomColor() {
        // Lista de colores posibles (sin café)
        String[] colors = {"red", "blue", "green", "yellow", "magenta", "cyan", "purple", "orange"};
        Random rand = new Random();

        // Seleccionar un color aleatorio de la lista
        return colors[rand.nextInt(colors.length)];
    }
    
    public void changeColor(String newColor) {
        this.color = newColor;
        base.changeColor(newColor);
        // el techo no cambia, solo la base
    }


    public void moveTo(int x, int y) {
        positionX = x;  // Actualizamos la posición X
        positionY = y;  // Actualizamos la posición Y
    
        // Mover la base y el techo de la tienda
        base.setPosition(positionX, positionY);
        roof.setPosition(positionX + 10, positionY - sizeTriangle / 2);
    
        // Hacer visible la tienda en la nueva posición
        base.makeVisible();
        roof.makeVisible();
    }


    /**
     * Hace que la tienda sea visible.
     */
    public void makeVisible() {
        if (!isVisible) {
            base.makeVisible();
            roof.makeVisible();
            isVisible = true;
        }
    }

    /**
     * Hace que la tienda sea invisible.
     */
    public void makeInvisible() {
        if (isVisible) {
            base.makeInvisible();
            roof.makeInvisible();
            isVisible = false;
        }
    }
    
    public int getX() {
        return positionX;
    }
    
    
    public int getY() {
        return positionY;
    }
    
    public void setPosition(int x, int y) {
        int dx = x - this.positionX;
        int dy = y - this.positionY;

        this.positionX = x;
        this.positionY = y;

        base.moveHorizontal(dx);
        base.moveVertical(dy);

        roof.moveHorizontal(dx);
        roof.moveVertical(dy);
    }
    
    
}
