import java.awt.*;
import java.awt.geom.*;

/**
 * A circle that can be manipulated and that draws itself on a canvas.
 * 
 * @author  Michael Kolling and David J. Barnes
 * @version 1.0.  (15 July 2000) 
 */

public class Circle{

    public static final double PI=3.1416;
    
    private int diameter;
    private int xPosition;
    private int yPosition;
    private String color;
    private boolean isVisible;
    
    
    public Circle(){
        diameter = 30;
        xPosition = 55;
        yPosition = 55;
        color = "blue";
        isVisible = false;
    }

       
    public void makeVisible(){
        isVisible = true;
        draw();
    }
    

    public void makeInvisible(){
        erase();
        isVisible = false;
    }

    private void draw(){
        if(isVisible) {
            Canvas canvas = Canvas.getCanvas();
            canvas.draw(this, color, 
                new Ellipse2D.Double(xPosition, yPosition, 
                diameter, diameter));
            canvas.wait(10);
        }
    }

    private void erase(){
        if(isVisible) {
            Canvas canvas = Canvas.getCanvas();
            canvas.erase(this);
        }
    }
    
    /**
     * Move the circle a few pixels to the right.
     */
    public void moveRight(){
        moveHorizontal(20);
    }

    /**
     * Move the circle a few pixels to the left.
     */
    public void moveLeft(){
        moveHorizontal(-20);
    }

    /**
     * Move the circle a few pixels up.
     */
    public void moveUp(){
        moveVertical(-20);
    }

    /**
     * Move the circle a few pixels down.
     */
    public void moveDown(){
        moveVertical(20);
    }

    /**
     * Move the circle horizontally.
     * @param distance the desired distance in pixels
     */
    public void moveHorizontal(int distance){
        erase();
        xPosition += distance;
        draw();
    }

    /**
     * Move the circle vertically.
     * @param distance the desired distance in pixels
     */
    public void moveVertical(int distance){
        erase();
        yPosition += distance;
        draw();
    }

    /**
     * Slowly move the circle horizontally.
     * @param distance the desired distance in pixels
     */
    public void slowMoveHorizontal(int distance){
        int delta;

        if(distance < 0) {
            delta = -1;
            distance = -distance;
        } else {
            delta = 1;
        }

        for(int i = 0; i < distance; i++){
            xPosition += delta;
            draw();
        }
    }

    /**
     * Slowly move the circle vertically
     * @param distance the desired distance in pixels
     */
    public void slowMoveVertical(int distance){
        int delta;

        if(distance < 0) {
            delta = -1;
            distance = -distance;
        }else {
            delta = 1;
        }

        for(int i = 0; i < distance; i++){
            yPosition += delta;
            draw();
        }
    }

    /**
     * Change the size.
     * @param newDiameter the new size (in pixels). Size must be >=0.
     */
    public void changeSize(int newDiameter){
        erase();
        diameter = newDiameter;
        draw();
    }

    /**
     * Change the color. 
     * @param color the new color. Valid colors are "red", "yellow", "blue", "green",
     * "magenta" and "black".
     */
    public void changeColor(String newColor){
        color = newColor;
        draw();
    }

    /**
     * Retorna el área del círculo en píxeles^2 con máxima precisión.
     */
    public double area(){
        double diameter2 = diameter;
        double radio = diameter2 / 2.0;
        return PI * radio * radio;
    }
    
    /**
     * Aumenta el área del círculo en un porcentaje [0..100].
     * Calcula el nuevo diámetro en base al área.
     */
    public void bigger(int percentage){
        double areaActual = area();
    
        
        double areaNueva = areaActual * (1 + percentage / 100.0);
    
        
        double nuevoRadio = Math.sqrt(areaNueva / PI);
    
        
        double nuevoDiametro = 2 * nuevoRadio;
    
        // redondeo al entero más cercano porque diameter es int
        changeSize((int)Math.round(nuevoDiametro));
    }

        /**
     * Crea un círculo cuyo área (aproximada) es la proporcionada.
     * @param areaDeseada área deseada en píxeles^2 (double, puede ser entero)
     */
    public Circle(double areaDeseada) {

        double radio = Math.sqrt(areaDeseada / PI);

        double diamDouble = 2.0 * radio;
        
        this.diameter = (int) Math.round(diamDouble);
   
        this.xPosition = 20;
        this.yPosition = 15;
        this.color = "blue";
        this.isVisible = false;
    }

    /**
     * Crea un circulo con un diametro (diameter) es el proporcionado
     * @param diametroDeseado diametro deseado 
     */
    public Circle(int diametroDeseado){
        
        this.diameter = diametroDeseado;
        this.xPosition = 20;
        this.color = "blue";
        this.isVisible = false;
    }
    
    public int getDiameter() {
        return diameter;
    }

    public int getX() {
        return xPosition;
    }

    public int getY() {
        return yPosition;
    }

    public String getColor() {
        return color;
    }

    public boolean isVisible() {
        return isVisible;
    }

    // ✅ Setters
    public void setDiameter(int diameter) {
        this.diameter = diameter;
    }

    public void setPosition(int x, int y) {
        erase();
        this.xPosition = x;
        this.yPosition = y;
        draw();
    }

    public void setColor(String color) {
        this.color = color;
    }

    public void setVisible(boolean isVisible) {
        this.isVisible = isVisible;
    }
    
    
}
